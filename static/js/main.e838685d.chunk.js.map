{"version":3,"sources":["PriorityQueue/PNode.js","PriorityQueue/PriorityQueue.js","components/Node/Node.js","components/Node/PathNode.js","components/Node/WallNode.js","components/Node/VisitedNode.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Node","element","priority","this","PQueue","heap","value","temp","isEmpty","push","contains","i","length","splice","shift","className","onMouseUp","e","props","handleClick","id","testid","Component","PathNode","state","hidden","that","setTimeout","show","wait","setState","WallNode","VisitedNode","hiddentwo","GRID_COL","CAPACITY","createGrid","grid","Array","col","Main","node","chosenNodes","toPath","wallNodes","nodeList","ncList","isWall","newNodeList","tList","forEach","find","class","handleAlg","algorithm","addWall","dijkstras","BFS","GBFS","Astar","toggleWall","prev","closeSide","sideBar","document","getElementById","style","width","marginLeft","componentDidMount","a","gridComponent","window","jQuery","popover","click","modal","isStart","nodeTotal","adjList","visNode","visNum","pathLength","time","componentGrid","graphGrid","k","j","addNode","inc","addEdge","nt","al","n1","n2","weight","newAdjList","connection","test","list","Object","keys","c","Infinity","start","end","backtrace","pq","PriorityQueue","vis","Set","visNodes","t0","performance","now","insert","min","remove","crawlIdx","neighbor","has","add","includes","t1","Math","trunc","path","lastNode","unshift","animateVis","distances","totalNodes","dist","endx","endy","diagonalHeuristic","hcost","nx","ny","max","abs","timer","visitedNodes","filtered","nodeComponentList","animatedVisitedNodes","n","g","y","animate","wallButton","dButton","bButton","gButton","aButton","timeInfo","menu","onClick","data-toggle","data-trigger","data-placement","data-html","title","data-content","disabled","handleDijkstra","handleBFS","tabindex","role","aria-labelledby","aria-hidden","type","data-dismiss","aria-label","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e838685d.chunk.js","sourcesContent":["export default class Node {\n\n    constructor(element, priority){\n        this.element = element;\n        this.priority = priority;\n    }\n\n}","import Node from \"./PNode\";\n\nexport default class PQueue{\n\n    constructor(){\n\n        // define the array that will hold all nodes\n        //  - intialize an empty array with null\n        //  - we do not need to declare the currentSize and capacity as variables\n        //      - the currentSize can be gotten by heap.length\n        this.heap = [];\n\n    }\n\n    // Define all priority queue functions\n    //  - insert / enqueue function\n    //  - because this is a simple priority queue and not a min heap\n    //      - we can simply use a for loop to parse through the queue and insert our node at the correct position\n    insert(value, priority){\n\n        // create a new node\n        const temp = new Node(value, priority);\n\n        // check if the queue is empty\n        //  - if it is, simply push the node\n        if(this.isEmpty()){\n            this.heap.push(temp);\n        }\n\n        // other wise run a for loop through the queue and add the node\n        //  - we will first create a bool that we will use to double check if we added our node by the end of the for loop\n        let contains = false;\n    \n        //  - run a for loop through the queue\n        for(let i = 0; i < this.heap.length; i++){\n\n            // check if the current node priority is > temp\n            if(temp.priority < this.heap[i].priority){\n\n                // splice the node into the queue\n                this.heap.splice(i,0,temp);\n\n                // check contains to true\n                //  - indicating that the node has been added\n                contains = true;\n\n                // break once we have added the node\n                break;\n\n            }\n\n        }\n\n        // check if the node has been added or not\n        //  - if it has not, simply push the node to the queue\n        if(!contains){\n            this.heap.push(temp);\n        }\n\n    };\n\n    // - Remove Function\n    //  - this is a simple function that removes the item at the front of the queue\n    //  - it is similar to getMin()\n    remove(){\n\n        let min = this.heap.shift();\n\n        return min;\n\n    }\n\n\n    // - Is Empty Function\n    //  - this function simply checks if the heap is empty\n    isEmpty(){\n        return(this.heap.length === 0)\n    };\n\n\n}","import React, { Component } from 'react'\nimport './Node.css';\n\nexport default class Node extends Component {\n\n    render() {\n        return (\n            <div className = \"basicNode\" onMouseUp={e => this.props.handleClick(this)}>\n                <p id = \"nodeText\">{this.props.testid}</p>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './Node.css';\n\nexport default class PathNode extends Component {\n    constructor(props){\n        super(props)\n        \n        this.state = {\n            hidden: 'hidden'\n        }\n        \n    }\n\n    componentWillMount() {\n        var that = this;\n        setTimeout(function() {\n            that.show();\n        }, that.props.wait);\n    }\n\n    show(){\n        this.setState({hidden : \"\"});\n    }\n\n\n    render() {\n        return (\n            <div className = {`pathNode`}>\n                <div className = {`${this.state.hidden}`}>\n                    {this.props.testid}\n                </div>\n            </div>\n\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './Node.css';\n\nexport default class WallNode extends Component {\n\n    render() {\n        return (\n            <div className = \"wallNode\">\n                {this.props.testid}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './Node.css';\n\nexport default class VisitedNode extends Component {\n    constructor(props){\n        super(props)\n        \n        this.state = {\n            hiddentwo: 'hiddentwo'\n        }\n        \n    }\n\n    componentWillMount() {\n        var that = this;\n        setTimeout(function() {\n            that.show();\n        }, that.props.wait);\n    }\n\n    show(){\n        this.setState({hiddentwo : \"\"});\n    }\n\n\n    render() {\n        return (\n            <div className = {`visitedNode`}>\n                <div className = {`${this.state.hiddentwo}`}>\n                    {this.props.testid}\n                </div>\n            </div>\n\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport PriorityQueue from \"../../PriorityQueue/PriorityQueue\";\nimport Node from '../Node/Node';\nimport PathNode from '../Node/PathNode';\nimport WallNode from \"../Node/WallNode\";\nimport VisitedNode from \"../Node/VisitedNode\";\nimport \"./Main.css\"\n\nconst GRID_ROWS = 20;\nconst GRID_COL = 20;\nconst CAPACITY = GRID_ROWS * GRID_COL;\n\nconst createGrid = () => {\n\n    // initialize 1D grid with length\n    var grid = new Array(GRID_ROWS);\n\n    // populate grid with column arrays\n    for (var col = 0; col < GRID_COL; col++) {\n\n        grid[col] = new Array(GRID_COL);\n\n    }\n\n    // return the grid\n    return grid;\n\n}\n\nexport default class Main extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            isStart: true,\n            nodeTotal: [],\n            adjList: {},\n            visNode: [],\n            visNum: null,\n            ncList: [],\n            toPath: [],\n            pathLength: [],\n            wallNodes: [],\n            isWall: false,\n            time: null,\n            sideBar: true,\n\n        }\n    }\n\n    gridComponent() {\n        \n        let componentGrid = createGrid();\n        let graphGrid = createGrid();\n\n        let k = 0\n        for (let i = 0; i < componentGrid.length; i++) {\n            for (let j = 0; j < componentGrid[i].length; j++) {\n                let e = <Node testid={k} className={\"node \" + k} handleClick={this.handleClick}></Node>\n                componentGrid[i][j] = e\n                k++;\n            }\n        }\n\n        for (let i = 0; i < CAPACITY; i++) {\n            this.addNode(`node ${i}`);\n        }\n\n        let inc = 0\n        for (let i = 0; i < graphGrid.length; i++) {\n            for (let j = 0; j < graphGrid[i].length; j++) {\n                graphGrid[i][j] = inc;\n                inc++;\n            }\n        }\n\n        for (let i = 0; i < graphGrid.length - 1; i++) {\n            for (let j = 0; j < graphGrid.length; j++) {\n                this.addEdge(`node ${graphGrid[j][i]}`, `node ${graphGrid[j][i + 1]}`, 2)\n            }\n        }\n\n        for (let i = 0; i < graphGrid.length; i++) {\n            for (let j = 0; j < graphGrid.length - 1; j++) {\n                this.addEdge(`node ${graphGrid[j + 1][i]}`, `node ${graphGrid[j][i]}`, 2)\n            }\n        }\n\n        this.setState({\n            ncList: componentGrid,\n            wallNodes: [],\n            toPath: [],\n            visNode: [],\n            visNum: null,\n            isWall: false,\n            time: null,\n        })\n\n\n    }\n\n    addNode(node) {\n\n        let nt = this.state.nodeTotal;\n        let al = this.state.adjList;\n\n        nt.push(node);\n        al[node] = [];\n\n        this.setState({\n            nodeTotal: nt,\n            adjList: al,\n        })\n\n    }\n\n    addEdge(n1, n2, weight) {\n\n        let newAdjList = this.state.adjList;\n\n        newAdjList[n1].push({ connection: n2, weight: weight })\n        newAdjList[n2].push({ connection: n1, weight: weight })\n\n\n        this.setState({\n            adjList: newAdjList\n        })\n\n    }\n\n    addWall() {\n\n        let test = this.state.wallNodes\n        let list = this.state.adjList;\n\n        Object.keys(list).forEach((node) => {\n            if (test.find((e) => e === node)) {\n                Object.keys(list[node]).forEach((c) => {\n                    list[node][c].weight = Infinity;\n                })\n            }\n        })\n\n        this.setState({\n            adjList: list\n        })\n\n    }\n\n    handleClick = (node) => {\n\n        let chosenNodes = this.state.toPath;\n        let wallNodes = this.state.wallNodes;\n        let nodeList = this.state.ncList;\n\n        if (this.state.isWall === true) {\n\n            wallNodes.push(node.props.className)\n\n            let newNodeList = []\n            let tList = []\n\n            nodeList.forEach((e) => {\n                e.forEach((element) => {\n                    if (wallNodes.find((e) => element.props.className === e)) {\n                        element = <WallNode testid={element.props.testid} className={`wallNode`}></WallNode>\n                        newNodeList.push(element)\n                    } else {\n                        newNodeList.push(element)\n                    }\n                })\n            })\n\n            while (newNodeList.length) tList.push(newNodeList.splice(0, GRID_COL))\n\n            this.setState({\n                ncList: tList,\n                wallNodes: wallNodes\n            })\n\n        } else {\n            if (chosenNodes.length === 2) {\n                return;\n            } else {\n                \n                chosenNodes.push(node.props.className)\n\n                let newNodeList = []\n                let tList = []\n\n                nodeList.forEach((e) => {\n                    e.forEach((element) => {\n                        if(element.props.className !== \"wallNode\" && node.props.className === element.props.className){\n                            element = <PathNode testid = {<div className = \"flag\"><i class=\"fab fa-font-awesome-flag\"></i></div>} className = {element.props.className}></PathNode>\n                            newNodeList.push(element)\n                        } else {\n                            newNodeList.push(element)\n                        }\n                    })\n                })\n\n                while (newNodeList.length) tList.push(newNodeList.splice(0, GRID_COL))\n\n                this.setState({\n                    ncList: tList,\n                    toPath: chosenNodes \n                })\n            }\n        }\n\n\n    }\n\n    handleAlg = (algorithm) => {\n\n        this.addWall();\n\n        switch(algorithm){\n            case \"dijkstra\":\n                this.dijkstras(this.state.toPath[0], this.state.toPath[1]);\n                this.setState({\n                    toPath: [],\n                })\n                break;\n            case \"BFS\":\n                this.BFS(this.state.toPath[0], this.state.toPath[1]);\n                this.setState({\n                    toPath: [],\n                })\n                break;\n            case \"GBFS\":\n                this.GBFS(this.state.toPath[0], this.state.toPath[1]);\n                this.setState({\n                    toPath: [],\n                })\n                break; \n            case \"Astar\":\n                this.Astar(this.state.toPath[0], this.state.toPath[1]);\n                this.setState({\n                    toPath: [],\n                })\n                break;\n            default:\n                break;\n\n        }\n\n    }\n\n    toggleWall = (e) => {\n\n        this.setState(prev => ({\n            isWall: !prev.isWall\n        }))\n\n    }\n\n    BFS(start, end){\n        \n        let backtrace = {};\n\n        let pq = new PriorityQueue();\n\n        let vis = new Set();\n\n        let adjList = this.state.adjList;\n        let visNodes = this.state.visNode;\n\n        let t0 = performance.now()\n\n        pq.insert(start, 0);\n        visNodes.push(start);\n\n        while (!pq.isEmpty()) {\n\n            let min = pq.remove();\n\n            if(min === end){\n                return;\n            } else {\n                \n                let crawlIdx = min.element;\n\n                adjList[crawlIdx].forEach(neighbor => {\n\n                    if(!vis.has(neighbor.connection) && neighbor.weight !== Infinity){\n                        vis.add(neighbor.connection)\n                        pq.insert(neighbor.connection)\n                        backtrace[neighbor.connection] = crawlIdx;\n\n                        if (!visNodes.includes(end)) {\n                            visNodes.push(crawlIdx)\n                        }\n                    }\n\n                })\n\n            }\n\n        }\n\n        let t1 = performance.now();\n        let time = Math.trunc(t1-t0)\n\n        let path = [end];\n        let lastNode = end;\n\n        while (lastNode !== start) {\n\n            path.unshift(backtrace[lastNode]);\n            lastNode = backtrace[lastNode];\n\n        }\n\n\n        this.setState({\n            visNode: visNodes,\n            time: time,\n            pathLength: path.length\n        })\n\n        this.animateVis(path)\n\n\n    }\n\n    dijkstras(start, end) {\n\n        let distances = {};\n\n        let backtrace = {};\n\n        let pq = new PriorityQueue();\n\n        let t0 = performance.now()\n\n        distances[start] = 0;\n\n        const totalNodes = this.state.nodeTotal;\n        let adjList = this.state.adjList;\n        let visNodes = this.state.visNode;\n\n        totalNodes.forEach(node => {\n\n            if (node !== start) {\n                distances[node] = Infinity;\n\n            }\n\n        })\n\n        pq.insert(start, 0);\n        visNodes.push(start);\n\n        while (!pq.isEmpty()) {\n\n            let min = pq.remove();\n\n            let crawlIdx = min.element;\n\n            adjList[crawlIdx].forEach(neighbor => {\n\n                    let dist = distances[crawlIdx] + neighbor.weight;\n\n                    if (dist < distances[neighbor.connection]) {\n\n                        distances[neighbor.connection] = dist;\n\n                        backtrace[neighbor.connection] = crawlIdx;\n\n                        pq.insert(neighbor.connection, dist);\n\n                        if (!visNodes.includes(end) && !visNodes.includes(crawlIdx)) {\n                            visNodes.push(crawlIdx)\n                        }\n\n                    }\n\n            })\n\n\n        }\n\n        let t1 = performance.now()\n\n        let time = Math.trunc(t1 - t0)\n\n        let path = [end];\n        let lastNode = end;\n\n        while (lastNode !== start) {\n\n            path.unshift(backtrace[lastNode]);\n            lastNode = backtrace[lastNode];\n\n        }\n\n        this.setState({\n            visNode: visNodes,\n            time: time,\n            pathLength: path.length\n        })\n\n        this.animateVis(path)\n\n    }\n\n    GBFS(start, end){\n        \n        let backtrace = {};\n\n        let pq = new PriorityQueue();\n\n        let t0 = performance.now()\n\n        let adjList = this.state.adjList;\n        let visNodes = this.state.visNode;\n\n\n        pq.insert(start, 0);\n        visNodes.push(start);\n\n        let endx;\n        let endy;\n\n        for(let k = 0; k < GRID_COL; k++){\n            for(let j = 0; j < GRID_ROWS; j++){\n                if(this.state.ncList[k][j].props.className === end){\n                    endx = k;\n                    endy = j;\n                }\n            }\n        }\n\n        while(!pq.isEmpty()){\n\n            let min = pq.remove();\n            \n            let crawlIdx = min.element;\n\n            adjList[crawlIdx].forEach(neighbor => {\n\n                if(!Object.keys(backtrace).includes(neighbor.connection) && neighbor.weight !== Infinity){\n                    \n                    let priority = this.diagonalHeuristic(endx, endy, neighbor);\n    \n                    backtrace[neighbor.connection] = crawlIdx;\n    \n                    pq.insert(neighbor.connection, priority);\n    \n                    if (!visNodes.includes(end) && !visNodes.includes(crawlIdx)) {\n                        visNodes.push(crawlIdx)\n                    }\n                    \n                }\n\n            })\n\n        }\n\n        let t1 = performance.now()\n\n        let time = Math.trunc(t1 - t0)\n\n        let path = [end];\n        let lastNode = end;\n\n        while (lastNode !== start) {\n\n            path.unshift(backtrace[lastNode]);\n            lastNode = backtrace[lastNode];\n\n        }\n\n        this.setState({\n            visNode: visNodes,\n            time: time,\n            pathLength: path.length\n        })\n\n        this.animateVis(path)\n\n    }\n\n    Astar(start, end){\n      \n        let distances = {};\n\n        let backtrace = {};\n\n        let pq = new PriorityQueue();\n\n        let t0 = performance.now()\n\n        distances[start] = 0;\n\n        const totalNodes = this.state.nodeTotal;\n        let adjList = this.state.adjList;\n        let visNodes = this.state.visNode;\n\n        totalNodes.forEach(node => {\n\n            if (node !== start) {\n                distances[node] = Infinity;\n            }\n\n        })\n\n        pq.insert(start, 0);\n        visNodes.push(start);\n\n        let endx;\n        let endy;\n\n        for(let k = 0; k < GRID_COL; k++){\n            for(let j = 0; j < GRID_ROWS; j++){\n                if(this.state.ncList[k][j].props.className === end){\n                    endx = k;\n                    endy = j;\n                }\n            }\n        }\n\n        while (!pq.isEmpty()) {\n\n            let min = pq.remove();\n\n            let crawlIdx = min.element;\n\n            adjList[crawlIdx].forEach(neighbor => {\n\n                if(!Object.keys(backtrace).includes(neighbor.connection) && neighbor.weight !== Infinity){\n\n                    let dist = distances[crawlIdx] + neighbor.weight;\n\n                    let priority = this.diagonalHeuristic(endx,endy,neighbor);\n\n                    let hcost = dist + priority;\n\n                    if (dist < distances[neighbor.connection]) {\n\n                        distances[neighbor.connection] = dist;\n\n                        backtrace[neighbor.connection] = crawlIdx;\n\n                        pq.insert(neighbor.connection, hcost);\n\n                        if (!visNodes.includes(end)) {\n                            visNodes.push(crawlIdx)\n                        }\n\n                    }\n                }\n\n            \n            })\n\n\n        }\n\n        let t1 = performance.now()\n\n        let time = Math.trunc(t1 - t0)\n\n        let path = [end];\n        let lastNode = end;\n\n        while (lastNode !== start) {\n\n            path.unshift(backtrace[lastNode]);\n            lastNode = backtrace[lastNode];\n\n        }\n\n        this.setState({\n            visNode: visNodes,\n            time: time,\n            pathLength: path.length\n        })\n\n        this.animateVis(path)\n\n    }\n\n    diagonalHeuristic(endx,endy,neighbor){\n\n        let nx;\n        let ny;\n\n        for(let k = 0; k < GRID_COL; k++){\n            for(let j = 0; j < GRID_ROWS; j++){\n                if(this.state.ncList[k][j].props.className === neighbor.connection){\n                    nx = k;\n                    ny = j;\n                }\n            }\n        }\n\n        return Math.max(Math.abs(nx - endx),Math.abs(ny - endy));\n    }\n\n    animate(path) {\n\n        const nodeList = this.state.ncList;\n        let newNodeList = []\n        let tList = []\n        let timer = 0;\n\n        nodeList.forEach((e) => {\n            e.forEach((element) => {\n                if (path.find((e) => element.props.className === e)) {\n                    element = <PathNode testid={element.props.testid} className={`pathNode`} wait={timer}></PathNode>\n                    newNodeList.push(element)\n                    timer = timer + 80;\n                } else {\n                    newNodeList.push(element)\n                }\n            })\n        })\n\n        while (newNodeList.length) tList.push(newNodeList.splice(0, GRID_COL))\n\n        this.setState({\n            ncList: tList\n        })\n\n    }\n\n    animateVis(path) {\n\n        let visitedNodes = this.state.visNode;\n        let filtered = {}\n        let nodeComponentList = this.state.ncList\n        let nodeList= []\n        let newNodeList = []\n        let tList = []\n        let timer = 0;\n        let animatedVisitedNodes = []\n\n        visitedNodes.forEach((i) => {\n            if (!filtered[i]) {\n                filtered[i] = true;\n            }\n        })\n\n        for (let i = 0; i < GRID_COL; i++) {\n            for (let j = 0; j < GRID_COL; j++) {\n                nodeList.push(nodeComponentList[i][j])\n            }\n        }\n\n        Object.keys(filtered).forEach((e) => {\n            nodeList.forEach((n) => {\n                if (e === n.props.className) {\n                    n = <VisitedNode testid={n.props.testid} className={n.props.className} wait={timer}></VisitedNode>\n                    newNodeList.push(n)\n                    timer = timer + 10;\n                }\n            })\n        })\n\n        nodeComponentList.forEach((g) => {\n            g.forEach((y) => {\n                if (newNodeList.find((node) => y.props.className === node.props.className)) {\n                    let node = newNodeList.find((node) => y.props.className === node.props.className)\n                    y = node\n                    animatedVisitedNodes.push(y)\n                }\n                else if (y.props.className === \"wallNode\") {\n                    y = <WallNode testid={y.props.testid}></WallNode>\n                    animatedVisitedNodes.push(y)\n                }\n                else {\n                    y = <Node testid={y.props.testid} className={y.props.className} handleClick={() => null}></Node>\n                    animatedVisitedNodes.push(y)\n                }\n            })\n        })\n\n        while (animatedVisitedNodes.length) tList.push(animatedVisitedNodes.splice(0, GRID_COL))\n\n        this.setState({\n            ncList: tList,\n            visNum: Object.keys(filtered).length\n        })\n\n        setTimeout(() => {\n            this.animate(path)\n        }, timer + 500)\n\n    }\n\n    closeSide = () => {\n        if(this.state.sideBar === true){\n            document.getElementById(\"sideBar\").style.width = \"100px\"\n            \n            this.setState({\n                sideBar: false\n            })\n        } else {\n            document.getElementById(\"sideBar\").style.width = \"480px\"\n            document.getElementById(\"clearBtn\").style.marginLeft = \"20\"\n            this.setState({\n                sideBar: true\n            })\n        }\n    }\n\n    componentDidMount = async () => {\n\n        await this.gridComponent();\n\n        window.jQuery('#dijkstra').popover();\n        window.jQuery('#dijkstra').click((e) => {\n            window.jQuery('#dijkstra').popover('hide');\n        })\n\n        window.jQuery('#BFS').popover();\n        window.jQuery('#BFS').click((e) => {\n            window.jQuery('#BFS').popover('hide');\n        })\n\n        window.jQuery('#GBFS').popover();\n        window.jQuery('#GBFS').click((e) => {\n            window.jQuery('#GBFS').popover('hide');\n        })\n\n        window.jQuery('#Astar').popover();\n        window.jQuery('#Astar').click((e) => {\n            window.jQuery('#Astar').popover('hide');\n        })\n\n        window.jQuery('#myModal').modal()\n\n\n    }\n\n    render() {\n\n        let wallButton;\n        let dButton;\n        let bButton;\n        let gButton;\n        let aButton;\n        let timeInfo;\n        let menu;\n\n        if (this.state.isWall === true) {\n            wallButton = <button className=\"btn wallToggle\" onClick={e => this.toggleWall()}><i class=\"fas fa-toggle-on\"></i> Add Wall</button>\n        } else {\n            wallButton = <button className=\"btn wallToggleOff\" onClick={e => this.toggleWall()}><i class=\"fas fa-toggle-off\"></i> Add Wall</button>\n        }\n\n        if (this.state.toPath.length < 2) {\n            if(this.state.sideBar === true){\n                dButton = <button className=\"btn wallToggleOff \" id=\"dijkstra\" data-toggle=\"tooltip\" data-trigger=\"hover\" data-placement=\"top\" data-html=\"true\" title=\"<i class='fas fa-cogs'></i> <b>Dijkstra's Shortest Path</b>\" data-content=\"Dijkstra's Shortest Path Algorithm is a <b>weighted</b> <b>greedy</b> algorithm that <b>guarantees</b> the shortest path between two nodes in a graph <br/> The algorithm will only visit neighboring nodes that have the <b>shortest distance</b> between the starting node<br/>\" onClick={() => this.handleAlg(\"dijkstra\")} disabled><i class=\"fas fa-cogs\"></i> Dijkstra</button>\n                bButton = <button className=\"btn wallToggleOff \" id=\"BFS\" data-toggle=\"tooltip\" data-trigger=\"hover\" data-placement=\"top\" data-html=\"true\" title=\"<i class='fas fa-cog'></i> <b>Breadth First Search</b>\" data-content=\"Breadth First Search is an <b>unweighted</b> <b>greedy</b> algorithm that <b>guarantees</b> the shortest path between two nodes in a graph <br/> The algorithm will visit <b>all neighboring nodes</b> sequentually until the end node is found<br/>\" onClick={() => this.handleAlg(\"BFS\")} disabled><i class=\"fas fa-cog\"></i> BFS</button>\n                gButton = <button className=\"btn wallToggleOff \" id=\"GBFS\" data-toggle=\"tooltip\" data-trigger=\"hover\" data-placement=\"top\" data-html=\"true\" title=\"<i class='fas fa-map-marker'></i> <b>Greedy Best First Search</b>\" data-content=\"Greedy Best First Search is an <b>unweighted</b> <b>greedy</b> algorithm that <b>does not guarantee</b> the shortest path between two nodes in a graph <br/> The algorithm uses a <b>diagonal heuristic</b> (a prediction as to where the goal node is located) to trace a path<br/>\" onClick={() => this.handleAlg(\"GBFS\")} disabled><i class=\"fas fa-map-marker\"></i> GBFS</button>\n                aButton = <button className=\"btn wallToggleOff \" id=\"Astar\" data-toggle=\"tooltip\" data-trigger=\"hover\" data-placement=\"top\" data-html=\"true\" title=\"<i class='fas fa-map-marker-alt'></i> <b>A*</b>\" data-content=\"A* Search is a <b>weighted</b> <b>greedy</b> algorithm that <b>guarantees</b> the shortest path between two nodes in a graph <br/> The algorithm uses a <b>diagonal heuristic</b> (a prediction as to where the goal node is located) in conjunction with node distances to trace a path<br/>\" onClick={() => this.handleAlg(\"Astar\")} disabled><i class=\"fas fa-map-marker-alt\"></i> A*</button>\n            } else {\n                dButton = <button className=\"btn wallToggleOff \"  style = {{marginLeft: '0px', width: '100px'}} onClick={() => this.handleDijkstra()} disabled>Dijkstra</button>\n                bButton = <button className=\"btn wallToggleOff \"  style = {{marginLeft: '0px', width: '100px'}} onClick={() => this.handleBFS()} disabled>BFS</button>\n            }\n            \n        } else {\n            if(this.state.sideBar === true){\n                dButton = <button className=\"btn wallToggleOff \" id=\"dijkstra\" data-toggle=\"tooltip\" data-trigger=\"hover\" data-placement=\"top\" data-html=\"true\" title=\"<i class='fas fa-cogs'></i> <b>Dijkstra's Shortest Path</b>\" data-content=\"Dijkstra's Shortest Path Algorithm is a <b>weighted</b> <b>greedy</b> algorithm that <b>guarantees</b> the shortest path between two nodes in a graph <br/> The algorithm will only visit neighboring nodes that have the <b>shortest distance</b> between the starting node<br/>\" onClick={() => this.handleAlg(\"dijkstra\")} ><i class=\"fas fa-cogs\"></i> Dijkstra</button>\n                bButton = <button className=\"btn wallToggleOff \" id=\"BFS\" data-toggle=\"tooltip\" data-trigger=\"hover\" data-placement=\"bottom\" data-html=\"true\" title=\"<i class='fas fa-cog'></i> <b>Breadth First Search</b>\" data-content=\"Breadth First Search is an <b>unweighted</b> <b>greedy</b> algorithm that <b>guarantees</b> the shortest path between two nodes in a graph <br/> The algorithm will visit <b>all neighboring nodes</b> sequentually until the end node is found<br/>\" onClick={() => this.handleAlg(\"BFS\")}><i class=\"fas fa-cog\"></i> BFS</button>\n                gButton = <button className=\"btn wallToggleOff \" id=\"GBFS\" data-toggle=\"tooltip\" data-trigger=\"hover\" data-placement=\"top\" data-html=\"true\" title=\"<i class='fas fa-map-marker'></i> <b>Greedy Best First Search</b>\" data-content=\"Breadth First Search is an <b>unweighted</b> <b>greedy</b> algorithm that <b>does not guarantee</b> the shortest path between two nodes in a graph <br/> The algorithm uses a <b>diagonal heuristic</b> (a prediction as to where the goal node is located) to trace a path<br/>\" onClick={() => this.handleAlg(\"GBFS\")}><i class=\"fas fa-map-marker\"></i> GBFS</button>\n                aButton = <button className=\"btn wallToggleOff \" id=\"Astar\" data-toggle=\"tooltip\" data-trigger=\"hover\" data-placement=\"top\" data-html=\"true\" title=\"<i class='fas fa-fa-map-alt'></i> <b>A*</b>\" data-content=\"A* Search is a <b>weighted</b> <b>greedy</b> algorithm that <b>guarantees</b> the shortest path between two nodes in a graph <br/> The algorithm uses a <b>diagonal heuristic</b> (a prediction as to where the goal node is located) in conjunction with node distances to trace a path<br/>\" onClick={() => this.handleAlg(\"Astar\")} ><i class=\"fas fa-map-marker-alt\"></i> A*</button>\n            } else {\n                dButton = <button className=\"btn wallToggleOff \"  style = {{marginLeft: '0px', width: '100px'}} onClick={() => this.handleDijkstra()}>Dijkstra</button>\n                bButton = <button className=\"btn wallToggleOff \"  style = {{marginLeft: '0px', width: '100px'}} onClick={() => this.handleBFS()}>BFS</button>\n            }\n            \n        }\n\n        if(this.state.time !== null){\n            timeInfo = \n            <div className = \"card infoCard\">\n                <p class=\"card-title card-header performance\"><i class=\"fas fa-tachometer-alt\"></i> Algorithm Performance</p>\n                <div className = \"card-body\">    \n                    <p><b>{this.state.pathLength}</b> nodes in path</p>\n                    <p><b>{this.state.visNum}</b> nodes visited</p>\n                </div>\n            </div>\n        } else {\n            timeInfo = null;\n        }\n\n        if(this.state.sideBar === true){\n            menu = \n            <nav id=\"sideBar\">\n                <p id=\"sideBarTitle\"><i class=\"fas fa-wrench\"></i> Instructions:</p>\n                <p id=\"bar\">______________________________________________________________________________</p>\n                <ul>\n                    <li id=\"sText\">Click on any 2 nodes on the grid to pathfind</li>\n                    <div id=\"pathNodes\">\n                        <p id=\"pathText\"> Selected Nodes: </p>\n                        <p id=\"pathText\">{this.state.toPath[0]} {this.state.toPath[1]}</p>\n                    </div>\n                    <p id=\"bar\">_____________________</p>\n                    <div id=\"infoBox\">\n                        <div id=\"textBox\">\n                            <li id=\"sText\">Add Barriers on the grid using the \"Add Wall\" button below or clear the grid using the \"Clear Grid\" button</li>\n                            <br />\n                            {wallButton}\n                            <button className=\"btn wallToggleOff clear\" id = \"clearBtn\" onClick={() => this.gridComponent()}><i class=\"fas fa-border-all\"></i> Clear Grid</button>\n                            <br />\n                            <br />\n                            <li id=\"sText\">When you're ready, click an algorithm to visualize!</li>\n                            <br />\n                            {bButton}\n                            {dButton}\n                            {gButton}\n                            {aButton}\n                            <br />\n                            <br />\n                            {timeInfo}\n                            <br />\n                        </div>\n                    </div>\n                </ul>\n            </nav>\n        } else {\n            menu = \n            <nav id=\"sideBar\">\n                <button onClick = {(e) => this.closeSide()}>close</button>\n                <br/>\n                <br/>\n                {wallButton}\n                <br/>\n                <br/>\n                <button className=\"btn wallToggleOff clear\" id = \"clearBtn\" style = {{marginLeft: '0px', width: '100px'}}onClick={() => this.gridComponent()}>Clear Grid</button>\n                <br/>\n                <br/>\n                <p id=\"bar\">_____________________</p>\n                <br/>\n                <br/>\n                {bButton}\n                <br/>\n                <br/>\n                {dButton}\n            </nav>\n        }\n\n\n        return (\n            <div>\n\n                <div className=\"modal fade\" id=\"myModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\n                    <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\n                        <div className=\"modal-content\">\n\n                            <div className=\"modal-header\">\n                                <h4 className=\"modal-title\"><i class=\"fab fa-react\"></i> React Pathfinder</h4>\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                </button>\n                            </div>\n                            <div className=\"modal-body\">\n                                <p>Welcome to the <b>React Pathfinder!</b> <br /><br /> This application <b>visualizes pathfinding algorithms</b> on an interactive grid. <br /><br />Click on any 2 nodes on the grid and watch the pathfinder animate the path between them! <br /><br /> You can even <b>create barriers</b> between the nodes using the \"Add Wall\" button!</p>\n                                <br />\n                                <h1 className=\"text-center diagram\"><i className=\"fas fa-project-diagram\"></i></h1>\n                            </div>\n                            <div className=\"modal-footer\">\n                                <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <nav className=\"navbar\">\n                    <span className=\"navbar-brand mb-0 h1 title\"><i className=\"fab fa-react\"></i> React Pathfinder</span>\n                    <span className=\"navbar-brand mb-0 name\">Sasank G</span>\n                </nav>\n\n                {menu}\n\n                <div className=\"grid\">\n                    {this.state.ncList}\n                </div>\n\n            </div>\n\n        )\n    }\n}\n\n\n\n","import React from 'react';\nimport Main from '../src/components/Main/Main';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Main/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}